{
  "language": "Solidity",
  "sources": {
    "contracts/Faucet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\nimport \"./interface/IERC20.sol\";\n\nerror Faucet_NotOwner();\nerror Faucet_ReqMultiTimes();\nerror Faucet_LockTimeNotExpired();\nerror Faucet_MXCEmpty();\nerror Faucet_MoonEmpty();\n\ncontract Faucet {\n    address public moonToken;\n    address public owner;\n\n    uint256 public moonAllowed = 1e18;\n    uint256 public mxcAllowed = 100 * 1e18;\n\n    mapping(address => bool) public requestedMoon;\n    // Address and blocktime + 1 day is saved in TimeLock\n    mapping(address => uint256) public lockTime;\n\n    event SendMoon(address indexed Receiver);\n    event SendMxc(address indexed Receiver);\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert Faucet_NotOwner();\n        }\n        _;\n    }\n\n    constructor(address _moonToken) {\n        moonToken = _moonToken;\n        owner = msg.sender;\n    }\n\n    function setOwner(address _newOwner) public onlyOwner {\n        owner = _newOwner;\n    }\n\n    function setMxcAllowed(uint256 _newMxcAllowed) public onlyOwner {\n        mxcAllowed = _newMxcAllowed;\n    }\n\n    function setMoonallowed(uint256 _newMoonAllowed) public onlyOwner {\n        moonAllowed = _newMoonAllowed;\n    }\n\n    // one address can't receive once\n    function requestMoon(address recipient) external {\n        IERC20 token = IERC20(moonToken);\n        if (requestedMoon[recipient]) {\n            revert Faucet_ReqMultiTimes();\n        }\n        if (token.balanceOf(address(this)) < moonAllowed) {\n            revert Faucet_MoonEmpty();\n        }\n\n        token.faucetReceive(recipient);\n        requestedMoon[recipient] = true;\n        emit SendMoon(recipient);\n    }\n\n    function requestMXC(address recipient) external {\n        if (block.timestamp <= lockTime[recipient]) {\n            revert Faucet_LockTimeNotExpired();\n        }\n        if (address(this).balance < mxcAllowed) {\n            revert Faucet_MXCEmpty();\n        }\n\n        payable(recipient).transfer(mxcAllowed);\n        lockTime[recipient] = block.timestamp + 1 days;\n        emit SendMxc(recipient);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/interface/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nabstract contract IERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    function totalSupply() external view virtual returns (uint256);\n\n    function balanceOf(address account) external view virtual returns (uint256);\n\n    function faucetReceive(address recipient) external virtual returns (bool);\n\n    function transfer(\n        address to,\n        uint256 amount\n    ) external virtual returns (bool);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view virtual returns (uint256);\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) external virtual returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external virtual returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}